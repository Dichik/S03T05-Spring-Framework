swagger: "2.0"
info:
  description: "This is a sample DAO project for Assignment 5, Spring Framework."
  version: "1.0.0"
  title: "Swagger Assignment 5"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "omeluan.dima@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
schemes:
  - "http"
paths:
  /users:
    get:
      tags:
        - "users"
      summary: "Find all users"
      description: "Returns list of all users"
      operationId: "getAll"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
        - "users"
      summary: "Create a user"
      description: "Should create a user."
      operationId: "create"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          description: "User object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "Successful operation"

  /users/{id}:
    get:
      tags:
        - "users"
      summary: "Find user by id"
      description: "Returns a single user"
      operationId: "getById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of user to return"
          required: true
          type: integer
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
        - "users"
      summary: "Update user info by id"
      description: "Operation to update user data by id"
      operationId: "update"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "id of user to update"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user applied"
        "401":
          description: "User not found"
        "201":
          description: "User was successfully created"
    delete:
      tags:
        - "users"
      summary: "Delete user by id"
      description: "Here we delete the user by id"
      operationId: "delete"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The id that needs to be deleted"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Deleted successfully"
        "400":
          description: "Invalid user applied"
        "401":
          description: "User not found"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      secondName:
        type: "string"
      email:
        type: "string"